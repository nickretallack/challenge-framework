// Generated by CoffeeScript 1.9.2
(function() {
  var Application, CodeEditor, Feedback, MustHave, MustOrMustnt, Requirements, application, cortex, default_code, default_code_structure, feedback, structure_types,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CodeEditor = React.createClass({
    componentDidMount: function() {
      var editor, session;
      editor = ace.edit(this.refs.text.getDOMNode());
      editor.$blockScrolling = Infinity;
      session = editor.getSession();
      session.setValue(this.props.code.val());
      session.setMode("ace/mode/javascript");
      this.setState({
        session: session
      });
      return session.on('change', (function(_this) {
        return function() {
          return _this.props.code.set(session.getValue());
        };
      })(this));
    },
    render: function() {
      return React.createElement("div", {
        "ref": "text",
        "style": {
          height: this.props.height
        }
      });
    }
  });

  MustHave = React.createClass({
    render: function() {
      if (this.props.ok) {
        return React.createElement("li", {
          "className": "good"
        }, React.createElement("span", {
          "className": "glyphicon glyphicon-ok",
          "aria-hidden": "true"
        }), " ", this.props.value);
      } else {
        return React.createElement("li", {
          "className": "bad"
        }, React.createElement("span", {
          "className": "glyphicon glyphicon-remove",
          "aria-hidden": "true"
        }), " ", this.props.value);
      }
    }
  });

  Feedback = React.createClass({
    render: function() {
      var content, must_hasnt, must_have, ok, structure_type;
      return content = this.props.feedback.error ? React.createElement("div", {
        "className": "bad"
      }, React.createElement("span", {
        "className": "glyphicon glyphicon-remove",
        "aria-hidden": "true"
      }), " ", this.props.feedback.error) : (must_hasnt = this.props.feedback.must_hasnt, must_have = (function() {
        var i, len, ref, results;
        ref = this.props.requirements.must_have.val();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          structure_type = ref[i];
          ok = indexOf.call(must_hasnt, structure_type) < 0;
          results.push(React.createElement(MustHave, {
            "value": structure_type,
            "ok": ok
          }));
        }
        return results;
      }).call(this), React.createElement("div", null, "\t\t\t\tYour solution must have:", React.createElement("ul", {
        "className": "list-unstyled"
      }, must_have)));
    }
  });

  structure_types = ['IfStatement', 'WhileStatement', 'ForStatement', 'VariableDeclaration'];

  MustOrMustnt = React.createClass({
    require: function() {
      var ref;
      if (!this.findRequired()) {
        this.props.required.push(this.props.value);
      }
      return (ref = this.findBanned()) != null ? ref.remove() : void 0;
    },
    ban: function() {
      var ref;
      if (!this.findBanned()) {
        this.props.banned.push(this.props.value);
      }
      return (ref = this.findRequired()) != null ? ref.remove() : void 0;
    },
    allow: function() {
      var ref, ref1;
      if ((ref = this.findRequired()) != null) {
        ref.remove();
      }
      return (ref1 = this.findBanned()) != null ? ref1.remove() : void 0;
    },
    findRequired: function() {
      return this.props.required.find((function(_this) {
        return function(item) {
          return item.val() === _this.props.value;
        };
      })(this));
    },
    findBanned: function() {
      return this.props.banned.find((function(_this) {
        return function(item) {
          return item.val() === _this.props.value;
        };
      })(this));
    },
    render: function() {
      var allowed, banned, required;
      required = this.findRequired();
      banned = this.findBanned();
      allowed = !required && !banned;
      return React.createElement("tr", null, React.createElement("td", null, this.props.value), React.createElement("td", {
        "class": "radio"
      }, React.createElement("label", null, React.createElement("input", {
        "name": this.props.value,
        "type": "radio",
        "checked": required,
        "onChange": this.require
      }))), React.createElement("td", {
        "class": "radio"
      }, React.createElement("label", null, React.createElement("input", {
        "name": this.props.value,
        "type": "radio",
        "checked": allowed,
        "onChange": this.allow
      }))), React.createElement("td", {
        "class": "radio"
      }, React.createElement("label", null, React.createElement("input", {
        "name": this.props.value,
        "type": "radio",
        "checked": banned,
        "onChange": this.ban
      }))));
    }
  });

  Requirements = React.createClass({
    render: function() {
      var structure_type, structures;
      structures = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = structure_types.length; i < len; i++) {
          structure_type = structure_types[i];
          results.push(React.createElement(MustOrMustnt, {
            "value": structure_type,
            "required": this.props.must_have,
            "banned": this.props.mustnt_have
          }));
        }
        return results;
      }).call(this);
      return React.createElement("div", null, React.createElement("table", {
        "className": "table"
      }, React.createElement("thead", null, React.createElement("th", null), React.createElement("th", null, "Required"), React.createElement("th", null, "Allowed"), React.createElement("th", null, "Banned")), React.createElement("tbody", null, structures)), React.createElement("h3", null, "Code Structure"), React.createElement(CodeEditor, {
        "code": this.props.code_structure,
        "height": 400.
      }));
    }
  });

  Application = React.createClass({
    render: function() {
      var feedback;
      feedback = this.props.feedback ? React.createElement(Feedback, {
        "feedback": this.props.feedback,
        "requirements": this.props.cortex.requirements
      }) : void 0;
      return React.createElement("div", {
        "className": "row"
      }, React.createElement("div", {
        "className": "col-sm-4"
      }, React.createElement("h2", null, "Code"), React.createElement(CodeEditor, {
        "code": this.props.cortex.code,
        "height": 700.
      })), React.createElement("div", {
        "className": "col-sm-4"
      }, React.createElement("h2", null, "Feedback"), feedback), React.createElement("div", {
        "className": "col-sm-4"
      }, React.createElement("h2", null, "Exercise Settings"), React.createElement(Requirements, React.__spread({}, this.props.cortex.requirements, {
        "onChange": this.onRequirementChange
      }))));
    }
  });

  default_code = "var y = 5;\nif(y){\n	for(x=0; x<5; x++){\n		console.log('yay')\n	}\n}";

  default_code_structure = "for(;;) {\n	if (){\n\n	}\n}\n";

  cortex = new Cortex({
    requirements: {
      must_have: ['ForStatement'],
      mustnt_have: ['WhileStatement'],
      code_structure: default_code_structure
    },
    code: default_code
  });

  application = React.render(React.createElement(Application, {
    "cortex": cortex
  }), document.getElementById('application'));

  cortex.on('update', function(newCortex) {
    var error, feedback;
    try {
      feedback = check_code(newCortex.code.val(), newCortex.requirements.val());
    } catch (_error) {
      error = _error;
      feedback = {
        error: error
      };
    }
    return application.setProps({
      cortex: newCortex,
      feedback: feedback
    });
  });

  feedback = check_code(cortex.code.val(), cortex.requirements.val());

  application.setProps({
    feedback: feedback
  });

}).call(this);
