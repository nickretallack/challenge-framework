// Generated by CoffeeScript 1.9.2
(function() {
  var Application, CodeEditor, Feedback, ListCheckbox, MustHave, Requirements, application, cortex, default_code, feedback, structure_types,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CodeEditor = React.createClass({
    componentDidMount: function() {
      var editor, session;
      editor = ace.edit(this.refs.text.getDOMNode());
      editor.$blockScrolling = Infinity;
      session = editor.getSession();
      session.setValue(this.props.code.val());
      session.setMode("ace/mode/javascript");
      this.setState({
        session: session
      });
      return session.on('change', (function(_this) {
        return function() {
          return _this.props.code.set(session.getValue());
        };
      })(this));
    },
    render: function() {
      return React.createElement("div", null, React.createElement("h2", null, "Code"), React.createElement("div", {
        "ref": "text",
        "style": {
          height: 700
        }
      }));
    }
  });

  MustHave = React.createClass({
    render: function() {
      if (this.props.ok) {
        return React.createElement("li", {
          "className": "good"
        }, React.createElement("span", {
          "className": "glyphicon glyphicon-ok",
          "aria-hidden": "true"
        }), " ", this.props.value);
      } else {
        return React.createElement("li", {
          "className": "bad"
        }, React.createElement("span", {
          "className": "glyphicon glyphicon-remove",
          "aria-hidden": "true"
        }), " ", this.props.value);
      }
    }
  });

  Feedback = React.createClass({
    render: function() {
      var must_hasnt, must_have, ok, structure_type;
      must_hasnt = this.props.feedback.must_hasnt;
      must_have = (function() {
        var i, len, ref, results;
        ref = this.props.requirements.must_have.val();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          structure_type = ref[i];
          ok = indexOf.call(must_hasnt, structure_type) < 0;
          results.push(React.createElement(MustHave, {
            "value": structure_type,
            "ok": ok
          }));
        }
        return results;
      }).call(this);
      return React.createElement("div", null, React.createElement("h2", null, "Feedback"), "\t\t\tYour solution must have:", React.createElement("ul", {
        "className": "list-unstyled"
      }, must_have), "\n\t\t\tSome feedback");
    }
  });

  structure_types = ['IfStatement', 'WhileStatement', 'ForStatement', 'VariableDeclaration'];

  ListCheckbox = React.createClass({
    onChange: function(event) {
      var checked, was_checked;
      checked = event.currentTarget.checked;
      was_checked = this.isChecked();
      if (checked && !was_checked) {
        this.props.list.push(this.props.value);
      }
      if (!checked && was_checked) {
        return was_checked.remove();
      }
    },
    isChecked: function() {
      return this.props.list.find((function(_this) {
        return function(item) {
          return item.val() === _this.props.value;
        };
      })(this));
    },
    render: function() {
      var checked;
      checked = this.isChecked();
      return React.createElement("div", {
        "className": "checkbox"
      }, React.createElement("label", null, React.createElement("input", {
        "type": "checkbox",
        "checked": checked,
        "onChange": this.onChange
      }), " ", this.props.value));
    }
  });

  Requirements = React.createClass({
    render: function() {
      var must_have, mustnt_have, structure_type;
      must_have = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = structure_types.length; i < len; i++) {
          structure_type = structure_types[i];
          results.push(React.createElement(ListCheckbox, {
            "value": structure_type,
            "list": this.props.must_have,
            "key": structure_type
          }));
        }
        return results;
      }).call(this);
      mustnt_have = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = structure_types.length; i < len; i++) {
          structure_type = structure_types[i];
          results.push(React.createElement(ListCheckbox, {
            "value": structure_type,
            "list": this.props.mustnt_have,
            "key": structure_type
          }));
        }
        return results;
      }).call(this);
      return React.createElement("div", null, React.createElement("h2", null, "Exercise Settings"), React.createElement("h3", null, "Must Have"), must_have, React.createElement("h3", null, "Mustnt Have"), mustnt_have);
    }
  });

  Application = React.createClass({
    render: function() {
      var feedback;
      feedback = this.props.feedback ? React.createElement(Feedback, {
        "feedback": this.props.feedback,
        "requirements": this.props.cortex.requirements
      }) : void 0;
      return React.createElement("div", {
        "className": "row"
      }, React.createElement("div", {
        "className": "col-sm-5"
      }, React.createElement(CodeEditor, {
        "code": this.props.cortex.code
      })), React.createElement("div", {
        "className": "col-sm-4"
      }, feedback), React.createElement("div", {
        "className": "col-sm-3"
      }, React.createElement(Requirements, React.__spread({}, this.props.cortex.requirements, {
        "onChange": this.onRequirementChange
      }))));
    }
  });

  default_code = "var y = 5;\nif(y){\n	for(x=0; x<5; x++){\n		console.log('yay')\n	}\n}";

  cortex = new Cortex({
    requirements: {
      must_have: ['IfStatement'],
      mustnt_have: ['WhileStatement']
    },
    code: default_code
  });

  application = React.render(React.createElement(Application, {
    "cortex": cortex
  }), document.getElementById('application'));

  cortex.on('update', function(newCortex) {
    var feedback;
    try {
      feedback = check_code(newCortex.code.val(), newCortex.requirements.val());
    } catch (_error) {
      feedback = null;
    }
    return application.setProps({
      cortex: newCortex,
      feedback: feedback
    });
  });

  feedback = check_code(cortex.code.val(), cortex.requirements.val());

  application.setProps({
    feedback: feedback
  });

}).call(this);
