// Generated by CoffeeScript 1.7.1
(function() {
  var snippet, test,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  test = function(string, _arg) {
    var must_has, must_hasnt, must_have, mustnt_has, mustnt_have, node, parsed, structures, type, visit_node, _i, _len, _ref;
    must_have = _arg.must_have, mustnt_have = _arg.mustnt_have, structures = _arg.structures;
    must_have || (must_have = []);
    mustnt_have || (mustnt_have = []);
    structures || (structures = []);
    parsed = esprima.parse(string);
    console.log(parsed);
    must_has = [];
    mustnt_has = [];
    visit_node = function(node) {
      var child_node, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      if (node === null) {
        return;
      }
      if ((_ref = node.type, __indexOf.call(mustnt_have, _ref) >= 0) && (_ref1 = node.type, __indexOf.call(mustnt_has, _ref1) < 0)) {
        mustnt_has.push(node.type);
      }
      if ((_ref2 = node.type, __indexOf.call(must_have, _ref2) >= 0) && (_ref3 = node.type, __indexOf.call(must_has, _ref3) < 0)) {
        console.log("has", node.type);
        must_has.push(node.type);
      }
      if (node.type === 'IfStatement') {
        visit_node(node.consequent);
        visit_node(node.alternate);
      }
      if (node.body != null) {
        _ref4 = node.body;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          child_node = _ref4[_i];
          visit_node(child_node);
        }
      }
      return void 0;
    };
    _ref = parsed.body;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      visit_node(node);
    }
    must_hasnt = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = must_have.length; _j < _len1; _j++) {
        type = must_have[_j];
        if (__indexOf.call(must_has, type) < 0) {
          _results.push(type);
        }
      }
      return _results;
    })();
    return {
      must_hasnt: must_hasnt,
      mustnt_has: mustnt_has
    };
  };

  snippet = "var y = 5;\nif(y){\n	for(x=0; x<5; x++){\n		console.log('yay')\n	}\n}";

  console.log(test(snippet, {
    must_have: ['IfStatement'],
    mustnt_have: ['WhileStatement']
  }));

}).call(this);
